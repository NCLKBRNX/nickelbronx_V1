"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/__generated__/gql.ts":
/*!**********************************!*\
  !*** ./src/__generated__/gql.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gql: function() { return /* binding */ gql; }\n/* harmony export */ });\n/* harmony import */ var _graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./graphql */ \"./src/__generated__/graphql.ts\");\n/* eslint-disable */ \n/**\n * Map of all GraphQL operations in the project.\n *\n * This map has several performance disadvantages:\n * 1. It is not tree-shakeable, so it will include all operations in the project.\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\n * 3. It does not support dead code elimination, so it will add unused operations.\n *\n * Therefore it is highly recommended to use the babel or swc plugin for production.\n */ const documents = {\n    \"\\n    fragment HeaderGeneralSettingsFragment on GeneralSettings {\\n      title\\n      description\\n    }\\n  \": _graphql__WEBPACK_IMPORTED_MODULE_0__.HeaderGeneralSettingsFragmentFragmentDoc,\n    \"\\n    fragment PrimaryMenuItemFragment on MenuItem {\\n      id\\n      uri\\n      path\\n      label\\n      parentId\\n      cssClasses\\n      menu {\\n        node {\\n          name\\n        }\\n      }\\n    }\\n  \": _graphql__WEBPACK_IMPORTED_MODULE_0__.PrimaryMenuItemFragmentFragmentDoc,\n    \"\\n        fragment HeroSectionBlocks on HeroSectionBlocks {\\n            __typename\\n            heroDescription\\n            heroTitle\\n            heroCta {\\n            ctaLink {\\n              target\\n              title\\n              url\\n            }\\n            ctaText\\n          }\\n        }\\n    \": _graphql__WEBPACK_IMPORTED_MODULE_0__.HeroSectionBlocksFragmentDoc,\n    \"\\n        fragment HeroVideo on HeroVideo {\\n            __typename\\n            heroVideoUri\\n          }\\n    \": _graphql__WEBPACK_IMPORTED_MODULE_0__.HeroVideoFragmentDoc,\n    \"\\n        fragment BlocksWhoWeAre on BlocksWhoWeAre {\\n            __typename\\n            subtitleWwa\\n            titleWwa\\n            descriptionWwa\\n            ctaWwa {\\n            ctaWwaLink {\\n              target\\n              title\\n              url\\n            }\\n            ctaWwaTitle\\n          }\\n        }\\n    \": _graphql__WEBPACK_IMPORTED_MODULE_0__.BlocksWhoWeAreFragmentDoc,\n    \"\\n  query GetExamplePage {\\n    generalSettings {\\n      title\\n      description\\n    }\\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\\n      nodes {\\n        id\\n        uri\\n        path\\n        label\\n        parentId\\n        cssClasses\\n        menu {\\n          node {\\n            name\\n          }\\n        }\\n      }\\n    }\\n  }\\n\": _graphql__WEBPACK_IMPORTED_MODULE_0__.GetExamplePageDocument,\n    \"\\n  query GetArchive($uri: String!) {\\n    nodeByUri(uri: $uri) {\\n      archiveType: __typename\\n      ... on Category {\\n        name\\n        posts {\\n          nodes {\\n            id\\n            title\\n            uri\\n          }\\n        }\\n      }\\n      ... on Tag {\\n        name\\n        posts {\\n          nodes {\\n            id\\n            title\\n            uri\\n          }\\n        }\\n      }\\n    }\\n    generalSettings {\\n      title\\n      description\\n    }\\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\\n      nodes {\\n        id\\n        uri\\n        path\\n        label\\n        parentId\\n        cssClasses\\n        menu {\\n          node {\\n            name\\n          }\\n        }\\n      }\\n    }\\n  }\\n\": _graphql__WEBPACK_IMPORTED_MODULE_0__.GetArchiveDocument,\n    '\\nquery GetHomePage {\\n  generalSettings {\\n    title\\n    description\\n  }\\n  primaryMenuItems: menuItems(where: {location: PRIMARY}) {\\n    nodes {\\n      id\\n      uri\\n      path\\n      label\\n      parentId\\n      cssClasses\\n      menu {\\n        node {\\n          name\\n        }\\n      }\\n    }\\n  }\\n  nickelBronxHeader {\\n    config {\\n      ctaText\\n      ctaLink\\n      brandLogo {\\n        node {\\n          sourceUrl\\n        }\\n      }\\n    }\\n  }\\n  page(id: \"cG9zdDoyMw==\") {\\n    editorBlocks {\\n      ... on AcfHeroSection {\\n        heroSectionBlocks {\\n          heroCta {\\n            ctaLink {\\n              target\\n              title\\n              url\\n            }\\n            ctaText\\n          }\\n          heroDescription\\n          heroTitle\\n        }\\n        clientId\\n      }\\n     ... on AcfHeroVideoSection {  \\n         heroVideo {\\n          heroVideoUri\\n        }\\n        clientId\\n      }\\n\\n       ... on AcfWhoWeAreSection {\\n        blocksWhoWeAre {\\n           ctaWwa {\\n            ctaWwaLink {\\n              target\\n              title\\n              url\\n            }\\n            ctaWwaTitle\\n          }\\n         subtitleWwa\\n            titleWwa\\n            descriptionWwa\\n        }\\n        clientId\\n      }\\n\\n    }\\n  }\\n}\\n': _graphql__WEBPACK_IMPORTED_MODULE_0__.GetHomePageDocument,\n    \"\\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false) {\\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\\n      title\\n      content\\n    }\\n    generalSettings {\\n      title\\n      description\\n    }\\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\\n      nodes {\\n        id\\n        uri\\n        path\\n        label\\n        parentId\\n        cssClasses\\n        menu {\\n          node {\\n            name\\n          }\\n        }\\n      }\\n    }\\n  }\\n\": _graphql__WEBPACK_IMPORTED_MODULE_0__.GetPageDocument,\n    \"\\n  query GetPost($databaseId: ID!, $asPreview: Boolean = false) {\\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\\n      title\\n      content\\n      date\\n      author {\\n        node {\\n          name\\n        }\\n      }\\n    }\\n    generalSettings {\\n      title\\n      description\\n    }\\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\\n      nodes {\\n        id\\n        uri\\n        path\\n        label\\n        parentId\\n        cssClasses\\n        menu {\\n          node {\\n            name\\n          }\\n        }\\n      }\\n    }\\n  }\\n\": _graphql__WEBPACK_IMPORTED_MODULE_0__.GetPostDocument\n};\nfunction gql(source) {\n    var _documents_source;\n    return (_documents_source = documents[source]) !== null && _documents_source !== void 0 ? _documents_source : {};\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/__generated__/gql.ts\n"));

/***/ })

});